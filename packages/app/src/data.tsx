let projects = [
  {
    Timestamp: "9/3/2023 4:00:37",
    projectName: "SemaphoreDao",
    tagline:
      "Create entry restricted DataDaos with the help of Semaphores and SpruceID",
    description:
      "Now-a-days Daos are open to users and there is no strict entry gated DAOs where in the DAO members feels a need to have an exclusive group chat with their members. Hence this can be solved by create an entry resstriction to the DAO ( such as user must have specific number of commits before joining the DAO) and their identity are generated by the ethereum public address by signing a message which generates the publickey and that public key generates the identity of the user using semaphores which is then stored on chain",
    ethereumAddress: "0xe872aB4c7e41eE9CDa5E45D73Fc53a6108f0aedE",
    website: "https://github.com/KENILSHAHH/ETHCON-Korea",
    thumbnailImageLink:
      "https://drive.google.com/open?id=1njyjNb77Q_88Fn_ac_-BWKC9sBKK2hCx",
    logoCdnUrl:
      "https://drive.google.com/open?id=16einOmXIIVagpW-_8eLiTVmYt4-BGGDX",
    bannerImageLink:
      "https://drive.google.com/open?id=1RYFb1YeSQuT3BS0uO125VFsOgDJ5mEqd",
    id: "1",
    recipientId: 1,
  },
  {
    Timestamp: "9/3/2023 6:05:56",
    projectName: "ChainBreaker",
    tagline: "Record and unchain debt chains with blockchain",
    description:
      '\nImagine if you could potentially alleviate the financial burdens of millions of people of millions of $ with just one small transaction. Our mobile web application consists of two primary entities: Clients and "Circuit Builders", or just "Builders".\n\nClients use the app to record their debts and the dynamic movements of these debts. On the other hand, Builders are entities who identify closed circuits of client debts and work towards freeing users from the chain by eliminating the smallest debt relation. Builders get tips from the Clients for this and also mint NFT as an incentive.\n\nTo put it simply, consider a scenario where person A owes person B $10, person B owes person C $10, and person C owes person A $10. In this case, they can collectively agree that nobody owes anything to anyone. 30$ debt reduced to 0$ debt. In the case the debts are not the same, every single debt is reduced by the smallest amount and one of the users is freed from that chain. While this concept is straightforward with just three people, it becomes increasingly complex to identify such circuits with tens, thousands, or even millions of individuals involved. Only a secure, tamper-proof, transparent, and decentralized network can effectively uncover and help address such intricate debt circuits.',
    ethereumAddress: "0xDaFD7e67664A118Fb2F7F130AE6E58A7588798cA",
    website: "https://github.com/gylman/ChainBreaker",
    thumbnailImageLink:
      "https://drive.google.com/open?id=1dm00SXpng-qksWLE7ELlZZU4yXYeXnD_",
    logoCdnUrl:
      "https://drive.google.com/open?id=1C-DtharpvXRxk7CXaG65CbsHQiTO8xM7",
    bannerImageLink:
      "https://drive.google.com/open?id=1x5mlqplOXv9VIRzFqt5ynJix3jjjdKLf",
    id: "2",
    recipientId: 2,
  },
  {
    Timestamp: "9/3/2023 7:10:06",
    projectName: "DECOHACKS(Decentralization Of HACKathonS)",
    tagline:
      "DECOHACKS is a decentralized hackathon platform crafted by seasoned hackathon enthusiasts. Addressing the operational pitfalls of Web3 hackathons, it leverages various L2 chains and Semaphore to ensure transparent and efficient management.",
    description:
      "The Senshilabs team, creators of DECOHACKS, participated in numerous hackathons over the years as hackathon geeks and consistently questioned the efficiency of their operations. They identified that Web3 based hackathons were still being managed on Web2 platforms. Processes like prize disbursements, which could be efficiently replaced with smart contracts, were still wasting unnecessary manpower and resources. With these issues in mind, DECOHACKS emerged as a solution in the form of a decentralized hackathon platform. By integrating various L2 chains and the Semaphore technology, this platform aims to significantly enhance the transparency, security, and accessibility of hackathon operations.",
    ethereumAddress: "0xCEe592359C4673d90921BbFD6bF46674FD890f16",
    website: "https://github.com/senshilabs/decohacks-proto",
    thumbnailImageLink:
      "https://drive.google.com/open?id=13BWDN-5rl3tlndBSmpU6AbB_acuMS0l5",
    logoCdnUrl:
      "https://drive.google.com/open?id=1VlS4yrpY38YFW6cKkVV_OZrEWwKQBayV",
    bannerImageLink:
      "https://drive.google.com/open?id=1WyL2PxV2zur2hUuK-CPmSV_QI-7BywZ8",
    id: "3",
    recipientId: 3,
  },
];

export function getProjects() {
  return projects;
}

export function getRecipientIdbyId(id) {
  console.log(id);
  const p = projects.find((p) => p.id === id);

  return p.recipientId;
}

export function getProject(id: string) {
  return (
    projects.find((p) => p.id === id) ?? {
      projectName: "404 Project not found",
      tagline: "404 Tagline not found",
      description: "404 Description not found",
      ethereumAddress: "404 Address not found",
      website: "404 URL not found",
      thumbnailImageLink: "https://source.unsplash.com/random",
      logoCdnUrl: "https://source.unsplash.com/random",
      bannerImageLink: "https://source.unsplash.com/random",
      recipientId: 0,
      id: "0",
    }
  );
}

function shuffleFisherYates(array: any) {
  let i = array.length;
  while (i--) {
    const ri = Math.floor(Math.random() * i);
    [array[i], array[ri]] = [array[ri], array[i]];
  }
  return array;
}

//return shuffled version of allprojects array
export function getShuffledProjects() {
  return shuffleFisherYates(getProjects());
}
